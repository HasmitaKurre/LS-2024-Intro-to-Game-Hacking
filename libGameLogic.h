class World {
public:
  std::set<ActorRef<IPlayer>> m_players;
  std::set<ActorRef<IActor>> m_actors;
  std::map<unsigned int, ActorRef<IActor>> m_actorsById;
  ILocalPlayer *m_localPlayer;
  uint32_t m_nextId;
  std::map<const char*, AIZone*> m_aiZones;

  void AddActorToWorld(Actor *);
  void AddActorToWorldWithId(uint32_t, Actor *);
  void SendEventToAllPlayers(const WriteStream &);
  void SendEventToAllPlayersExcept(Player *, const WriteStream &);
public:
  World(void);
  virtual ~World(void);
  virtual void Tick(float);
  virtual bool HasLocalPlayer(void);
  ILocalPlayer * GetLocalPlayer(void);
  virtual bool IsAuthority(void);
  virtual void AddLocalPlayer(Player *, ILocalPlayer *);
  virtual void AddRemotePlayer(Player *);
  virtual void AddRemotePlayerWithId(uint32_t, Player *);
  virtual void RemovePlayer(Player *);
  virtual void Use(Player *, Actor *);
  virtual void Activate(Player *, IItem *);
  virtual void Reload(Player *);
  virtual void Jump(bool);
  virtual void Sprint(bool);
  virtual void FireRequest(bool);
  virtual void TransitionToNPCState(Player *, const std::string &);
  virtual void BuyItem(Player *, Actor *, IItem *, uint32_t);
  virtual void SellItem(Player *, Actor *, IItem *, uint32_t);
  virtual void Respawn(Player *);
  virtual void Teleport(Player *, const std::string &);
  virtual void Chat(Player *, const std::string &);
  virtual void FastTravel(Player *, const std::string &, const std::string &);
  virtual void SetPvPDesired(Player *, bool);
  virtual void SubmitDLCKey(Player *, const std::string &);
  virtual void SetCircuitInputs(Player *, const std::string &, uint32_t);
  virtual void SendAddItemEvent(Player *, IItem *, uint32_t);
  virtual void SendRemoveItemEvent(Player *, IItem *, uint32_t);
  virtual void SendLoadedAmmoEvent(Player *, IItem *, uint32_t);
  virtual void SendPickedUpEvent(Player *, const std::string &);
  virtual void EquipItem(Player *, uint8_t, IItem *);
  virtual void SetCurrentSlot(Player *, uint8_t);
  virtual void SendEquipItemEvent(Player *, uint8_t, IItem *);
  virtual void SendCurrentSlotEvent(Player *, uint8_t);
  virtual void SetCurrentQuest(Player *, IQuest *);
  virtual void SendSetCurrentQuestEvent(Player *, IQuest *);
  virtual void SendStartQuestEvent(Player *, IQuest *);
  virtual void SendAdvanceQuestToStateEvent(Player *, IQuest *, IQuestState *);
  virtual void SendCompleteQuestEvent(Player *, IQuest *);
  virtual void SendHealthUpdateEvent(Actor *, int32_t);
  virtual void SendManaUpdateEvent(Player *, int32_t);
  virtual void SendCountdownUpdateEvent(Player *, int32_t);
  virtual void SendPvPCountdownUpdateEvent(Player *, bool, int32_t);
  virtual void SendPvPEnableEvent(Player *, bool);
  virtual void SendStateEvent(Actor *, const std::string &, bool);
  virtual void SendTriggerEvent(Actor *, const std::string &, Actor *, bool);
  virtual void SendFireBulletsEvent(Actor *, IItem *, const Vector3 &, uint32_t, float);
  virtual void SendDisplayEvent(Player *, const std::string &, const std::string &);
  virtual void SendNPCConversationStateEvent(Player *, Actor *, const std::string &);
  virtual void SendNPCConversationEndEvent(Player *);
  virtual void SendNPCShopEvent(Player *, Actor *);
  virtual void SendRespawnEvent(Player *, const Vector3 &, const Rotation &);
  virtual void SendTeleportEvent(Actor *, const Vector3 &, const Rotation &);
  virtual void SendRelativeTeleportEvent(Actor *, const Vector3 &);
  virtual void SendReloadEvent(Player *, IItem *, IItem *, uint32_t);
  virtual void SendPlayerJoinedEvent(Player *);
  virtual void SendPlayerLeftEvent(Player *);
  virtual void SendPlayerItemEvent(Player *);
  virtual void SendActorSpawnEvent(Actor *);
  virtual void SendActorDestroyEvent(Actor *);
  virtual void SendExistingPlayerEvent(Player *, Player *);
  virtual void SendExistingActorEvent(Player *, Actor *);
  virtual void SendChatEvent(Player *, const std::string &);
  virtual void SendKillEvent(Player *, Actor *, IItem *);
  virtual void SendCircuitOutputEvent(Player *, const std::string &, uint32_t, const std::vector<std::allocator<bool>> &);
  virtual void SendActorPositionEvents(Player *);
  virtual void SendRegionChangeEvent(Player *, const std::string &);
  virtual void SendLastHitByItemEvent(Player *, IItem *);
  bool SpawnActor(Actor *, const Vector3 &, const Rotation &);
  bool SpawnActorAtNamedLocation(Actor *, const char *);
  void SpawnActorWithId(uint32_t, Actor *, const Vector3 &, const Rotation &);
  void DestroyActor(Actor *);
  void SendSpawnEventsForExistingActors(Player *);
  void AddAIZone(AIZone *);
  AIZone * GetAIZone(const std::string &);
  void OnPlayerEnteredAIZone(const std::string &);
  void OnPlayerLeftAIZone(const std::string &);
  std::vector<IPlayer*> GetPlayersInRadius(const Vector3 &, float);
  std::vector<Projectile*> GetProjectilesInRadius(const Vector3 &, float);
  Actor * GetActorById(uint32_t);
  void RemoveAllActorsExceptPlayer(Player *);
  void ChangeActorId(Player *, uint32_t);
  bool IsPlayerAlreadyConnected(uint32_t);
};
